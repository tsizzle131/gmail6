# Environment Configuration for Gmail API Integration
# Copy this file to .env and fill in your actual values

# ================================
# CORE APPLICATION SETTINGS
# ================================
NODE_ENV=development
PORT=3000
NEXT_PUBLIC_API_URL=http://localhost:3000

# ================================
# SUPABASE DATABASE CONFIGURATION
# ================================
SUPABASE_URL=your_supabase_url_here
SUPABASE_ANON_KEY=your_supabase_anon_key_here
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key_here
DATABASE_URL=postgresql://user:password@localhost:5432/database

# ================================
# REDIS CONFIGURATION
# ================================
REDIS_URL=redis://localhost:6379

# ================================
# MAILGUN CONFIGURATION (Legacy)
# ================================
MAILGUN_API_KEY=your_mailgun_api_key_here
MAILGUN_DOMAIN=your_mailgun_domain_here
MAILGUN_WEBHOOK_SIGNING_KEY=your_mailgun_webhook_signing_key_here

# ================================
# GMAIL API CONFIGURATION (NEW)
# ================================
# Google Cloud Console OAuth2 credentials
GOOGLE_CLIENT_ID=your_google_client_id_here.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your_google_client_secret_here
GOOGLE_REDIRECT_URI=http://localhost:3000/gmail-auth/callback

# Encryption key for storing OAuth2 tokens (generate a random 32-character string)
ENCRYPTION_KEY=your_32_character_encryption_key_here

# ================================
# AI SERVICE CONFIGURATION
# ================================
OPENAI_API_KEY=your_openai_api_key_here

# Optional: Perplexity for lead research
PERPLEXITY_API_KEY=your_perplexity_api_key_here
PERPLEXITY_API_URL=https://api.perplexity.ai

# ================================
# GOOGLE CLOUD SETUP INSTRUCTIONS
# ================================
# 
# To get your Gmail API credentials:
# 
# 1. Go to Google Cloud Console (https://console.cloud.google.com/)
# 2. Create a new project or select existing one
# 3. Enable Gmail API:
#    - Go to "APIs & Services" > "Library"
#    - Search for "Gmail API" and enable it
# 4. Create OAuth2 credentials:
#    - Go to "APIs & Services" > "Credentials"
#    - Click "Create Credentials" > "OAuth 2.0 Client IDs"
#    - Choose "Web application"
#    - Add authorized redirect URI: http://localhost:3000/gmail-auth/callback
#    - For production, add your production domain callback URL
# 5. Copy the Client ID and Client Secret to this file
# 
# Optional: Set up Pub/Sub for real-time notifications:
# 1. Enable Pub/Sub API in Google Cloud Console
# 2. Create a topic for Gmail notifications
# 3. Set up a push subscription pointing to your webhook endpoint
# 
# ================================
# ENCRYPTION KEY GENERATION
# ================================
# 
# Generate a secure 32-character encryption key:
# Node.js: require('crypto').randomBytes(32).toString('hex')
# OpenSSL: openssl rand -hex 32
# Online: Use a secure random string generator
# 
# ================================
# PRODUCTION DEPLOYMENT NOTES
# ================================
# 
# For production deployment:
# 1. Update GOOGLE_REDIRECT_URI to your production domain
# 2. Add production domain to authorized origins in Google Cloud Console
# 3. Use environment-specific values for all configurations
# 4. Ensure ENCRYPTION_KEY is securely stored and not in version control
# 5. Set NODE_ENV=production
# 
# ================================
# GMAIL ACCOUNT LIMITS
# ================================
# 
# Gmail API Rate Limits:
# - 1 billion requests per day per project (free)
# - 250 quota units per user per second
# 
# Gmail Sending Limits:
# - Free Gmail: ~100-500 emails per day
# - Google Workspace: ~2000 emails per day
# - Limits reset daily and vary based on account age/reputation
# 
# ================================
# SECURITY CONSIDERATIONS
# ================================
# 
# 1. Never commit real credentials to version control
# 2. Use different encryption keys for different environments
# 3. Rotate OAuth2 refresh tokens periodically
# 4. Monitor for suspicious account activity
# 5. Implement proper access controls and user validation
# 6. Use HTTPS in production for all OAuth2 flows
# 
# ================================